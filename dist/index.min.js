(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)})([function(module,exports){"use strict";var is=Object["is"]||function(a,b){return a===b?a!==0||1/a==1/b:a!=a&&b!=b};var betterIndexOf=function(value){if(value!=value||value===0){for(var i=this.length;i--&&!is(this[i],value););}else{i=[].indexOf.call(this,value)}return i};var MapIterator=function(map,kind){var _index=0;return Object.create({},{next:{value:function(){if(_index<map.items().length){switch(kind){case"keys":return map.keys()[_index++];case"values":return map.values()[_index++];case"keys+values":return[].slice.call(map.items()[_index++]);default:throw new TypeError("Invalid iterator type")}}throw new Error("Stop Iteration")}},iterator:{value:function(){return this}},toString:{value:function(){return"[object Map Iterator]"}}})};var tsMap=function(){function tsMap(inputMap){this._items=[];this._keys=[];this._values=[];var t=this;if(inputMap){inputMap.forEach(function(k,v){t.set(v[0],v[1])})}}tsMap.prototype.fromJSON=function(jsonObject){for(var property in jsonObject){if(jsonObject.hasOwnProperty(property)){this.set(property,jsonObject[property])}}};tsMap.prototype.toJSON=function(){var obj={};var t=this;this.keys().forEach(function(k){obj[String(k)]=t.get(k)});return obj};tsMap.prototype.items=function(){return[].slice.call(this._items)};tsMap.prototype.keys=function(){return[].slice.call(this._keys)};tsMap.prototype.values=function(){return[].slice.call(this._values)};tsMap.prototype.has=function(key){var index=betterIndexOf.call(this._keys,key);return index>-1};tsMap.prototype.get=function(key){var index=betterIndexOf.call(this._keys,key);return index>-1?this._values[index]:undefined};tsMap.prototype.set=function(key,value){var t=this;var index=betterIndexOf.call(t._keys,key);if(index>-1){t._items[index][1]=value;t._values[index]=value}else{t._items.push([key,value]);t._keys.push(key);t._values.push(value)}};tsMap.prototype.size=function(){return this._items.length};tsMap.prototype.clear=function(){this._keys.length=this._values.length=this._items.length=0};tsMap.prototype.delete=function(key){var index=betterIndexOf.call(this._keys,key);if(index>-1){this._keys.splice(index,1);this._values.splice(index,1);this._items.splice(index,1);return true}return false};tsMap.prototype.forEach=function(callbackfn){if(typeof callbackfn!="function"){throw new TypeError("Invalid callback function given to forEach")}function tryNext(){try{return iter.next()}catch(e){return undefined}}var iter=this.iterator();var current=tryNext();var next=tryNext();while(current!==undefined){callbackfn.apply(arguments[1],[current[1],current[0],this]);current=next;next=tryNext()}};tsMap.prototype.iterator=function(){return MapIterator(this,"keys+values")};return tsMap}();exports.tsMap=tsMap}]);